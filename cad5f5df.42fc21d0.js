(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{61:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return o}));var a=n(2),i=n(6),r=(n(0),n(70)),l={},d={unversionedId:"Identify",id:"Identify",isDocsHomePage:!1,title:"Identify",description:"Identify()",source:"@site/docs/Identify.md",permalink:"/dave-JavaScript/Identify",editUrl:"https://github.com/datadive-ai/dave-JavaScript/website/docs/Identify.md",sidebar:"sidebar",previous:{title:"Datadive",permalink:"/dave-JavaScript/Datadive"},next:{title:"Revenue",permalink:"/dave-JavaScript/Revenue"}},b=[{value:"<code>Identify()</code>",id:"identify",children:[]},{value:"<code>Identify#add</code>",id:"identifyadd",children:[{value:"Parameters",id:"parameters",children:[]},{value:"Return Value",id:"return-value",children:[]}]},{value:"<code>Identify#append</code>",id:"identifyappend",children:[{value:"Parameters",id:"parameters-1",children:[]},{value:"Return Value",id:"return-value-1",children:[]}]},{value:"<code>Identify#prepend</code>",id:"identifyprepend",children:[{value:"Parameters",id:"parameters-2",children:[]},{value:"Return Value",id:"return-value-2",children:[]}]},{value:"<code>Identify#set</code>",id:"identifyset",children:[{value:"Parameters",id:"parameters-3",children:[]},{value:"Return Value",id:"return-value-3",children:[]}]},{value:"<code>Identify#setOnce</code>",id:"identifysetonce",children:[{value:"Parameters",id:"parameters-4",children:[]},{value:"Return Value",id:"return-value-4",children:[]}]},{value:"<code>Identify#unset</code>",id:"identifyunset",children:[{value:"Parameters",id:"parameters-5",children:[]},{value:"Return Value",id:"return-value-5",children:[]}]}],p={rightToc:b};function o(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"identify"},Object(r.b)("inlineCode",{parentName:"h2"},"Identify()")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"var identify = new datadive.Identify();\n")),Object(r.b)("p",null,"Identify API - instance constructor. Identify objects are a wrapper for user property operations.\nEach method adds a user property operation to the Identify object, and returns the same Identify object,\nallowing you to chain multiple method calls together.\nNote: if the same user property is used in multiple operations on a single Identify object,\nonly the first operation on that property will be saved, and the rest will be ignored."),Object(r.b)("h2",{id:"identifyadd"},Object(r.b)("inlineCode",{parentName:"h2"},"Identify#add")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"var identify = new datadive.Identify().add('karma', 1).add('friends', 1);\ndatadive.identify(identify); // send the Identify call\n")),Object(r.b)("p",null,"Increment a user property by a given value (can also be negative to decrement).\nIf the user property does not have a value set yet, it will be initialized to 0 before being incremented."),Object(r.b)("h3",{id:"parameters"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"property")," (",Object(r.b)("inlineCode",{parentName:"p"},"string"),")\nThe user property key.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"value")," (",Object(r.b)("inlineCode",{parentName:"p"},"number|string"),")\nThe amount by which to increment the user property. Allows numbers as strings (ex: '123')."))),Object(r.b)("h3",{id:"return-value"},"Return Value"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"(",Object(r.b)("inlineCode",{parentName:"li"},"Identify"),")\nReturns the same Identify object, allowing you to chain multiple method calls together.")),Object(r.b)("h2",{id:"identifyappend"},Object(r.b)("inlineCode",{parentName:"h2"},"Identify#append")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"var identify = new datadive.Identify().append('ab-tests', 'new-user-tests');\nidentify.append('some_list', [1, 2, 3, 4, 'values']);\ndatadive.identify(identify); // send the Identify call\n")),Object(r.b)("p",null,"Append a value or values to a user property.\nIf the user property does not have a value set yet,\nit will be initialized to an empty list before the new values are appended.\nIf the user property has an existing value and it is not a list,\nthe existing value will be converted into a list with the new values appended."),Object(r.b)("h3",{id:"parameters-1"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"property")," (",Object(r.b)("inlineCode",{parentName:"p"},"string"),")\nThe user property key.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"value")," (",Object(r.b)("inlineCode",{parentName:"p"},"number|string|list|object"),")\nA value or values to append.\nValues can be numbers, strings, lists, or object (key:value dict will be flattened)."))),Object(r.b)("h3",{id:"return-value-1"},"Return Value"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"(",Object(r.b)("inlineCode",{parentName:"li"},"Identify"),")\nReturns the same Identify object, allowing you to chain multiple method calls together.")),Object(r.b)("h2",{id:"identifyprepend"},Object(r.b)("inlineCode",{parentName:"h2"},"Identify#prepend")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"var identify = new datadive.Identify().prepend('ab-tests', 'new-user-tests');\nidentify.prepend('some_list', [1, 2, 3, 4, 'values']);\ndatadive.identify(identify); // send the Identify call\n")),Object(r.b)("p",null,"Prepend a value or values to a user property.\nPrepend means inserting the value or values at the front of a list.\nIf the user property does not have a value set yet,\nit will be initialized to an empty list before the new values are prepended.\nIf the user property has an existing value and it is not a list,\nthe existing value will be converted into a list with the new values prepended."),Object(r.b)("h3",{id:"parameters-2"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"property")," (",Object(r.b)("inlineCode",{parentName:"p"},"string"),")\nThe user property key.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"value")," (",Object(r.b)("inlineCode",{parentName:"p"},"number|string|list|object"),")\nA value or values to prepend.\nValues can be numbers, strings, lists, or object (key:value dict will be flattened)."))),Object(r.b)("h3",{id:"return-value-2"},"Return Value"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"(",Object(r.b)("inlineCode",{parentName:"li"},"Identify"),")\nReturns the same Identify object, allowing you to chain multiple method calls together.")),Object(r.b)("h2",{id:"identifyset"},Object(r.b)("inlineCode",{parentName:"h2"},"Identify#set")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"var identify = new datadive.Identify().set('user_type', 'beta');\nidentify.set('name', {'first': 'John', 'last': 'Doe'}); // dict is flattened and becomes name.first: John, name.last: Doe\ndatadive.identify(identify); // send the Identify call\n")),Object(r.b)("p",null,"Sets the value of a given user property. If a value already exists, it will be overwriten with the new value."),Object(r.b)("h3",{id:"parameters-3"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"property")," (",Object(r.b)("inlineCode",{parentName:"p"},"string"),")\nThe user property key.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"value")," (",Object(r.b)("inlineCode",{parentName:"p"},"number|string|list|boolean|object"),")\nA value or values to set.\nValues can be numbers, strings, lists, or object (key:value dict will be flattened)."))),Object(r.b)("h3",{id:"return-value-3"},"Return Value"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"(",Object(r.b)("inlineCode",{parentName:"li"},"Identify"),")\nReturns the same Identify object, allowing you to chain multiple method calls together.")),Object(r.b)("h2",{id:"identifysetonce"},Object(r.b)("inlineCode",{parentName:"h2"},"Identify#setOnce")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"var identify = new datadive.Identify().setOnce('sign_up_date', '2016-04-01');\ndatadive.identify(identify); // send the Identify call\n")),Object(r.b)("p",null,"Sets the value of a given user property only once. Subsequent setOnce operations on that user property will be ignored;\nhowever, that user property can still be modified through any of the other operations.\nUseful for capturing properties such as 'initial_signup_date', 'initial_referrer', etc."),Object(r.b)("h3",{id:"parameters-4"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"property")," (",Object(r.b)("inlineCode",{parentName:"p"},"string"),")\nThe user property key.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"value")," (",Object(r.b)("inlineCode",{parentName:"p"},"number|string|list|boolean|object"),")\nA value or values to set once.\nValues can be numbers, strings, lists, or object (key:value dict will be flattened)."))),Object(r.b)("h3",{id:"return-value-4"},"Return Value"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"(",Object(r.b)("inlineCode",{parentName:"li"},"Identify"),")\nReturns the same Identify object, allowing you to chain multiple method calls together.")),Object(r.b)("h2",{id:"identifyunset"},Object(r.b)("inlineCode",{parentName:"h2"},"Identify#unset")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"var identify = new datadive.Identify().unset('user_type').unset('age');\ndatadive.identify(identify); // send the Identify call\n")),Object(r.b)("p",null,"Unset and remove a user property. This user property will no longer show up in a user's profile."),Object(r.b)("h3",{id:"parameters-5"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"property")," (",Object(r.b)("inlineCode",{parentName:"li"},"string"),")\nThe user property key.")),Object(r.b)("h3",{id:"return-value-5"},"Return Value"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"(",Object(r.b)("inlineCode",{parentName:"li"},"Identify"),")\nReturns the same Identify object, allowing you to chain multiple method calls together.")))}o.isMDXComponent=!0}}]);